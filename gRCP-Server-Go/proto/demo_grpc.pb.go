// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicioGolangClient is the client API for ServicioGolang service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicioGolangClient interface {
	IniciarJuego(ctx context.Context, in *PlayerGameRequest, opts ...grpc.CallOption) (*PlayerGameReply, error)
}

type servicioGolangClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioGolangClient(cc grpc.ClientConnInterface) ServicioGolangClient {
	return &servicioGolangClient{cc}
}

func (c *servicioGolangClient) IniciarJuego(ctx context.Context, in *PlayerGameRequest, opts ...grpc.CallOption) (*PlayerGameReply, error) {
	out := new(PlayerGameReply)
	err := c.cc.Invoke(ctx, "/ServicioGolang/IniciarJuego", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicioGolangServer is the server API for ServicioGolang service.
// All implementations must embed UnimplementedServicioGolangServer
// for forward compatibility
type ServicioGolangServer interface {
	IniciarJuego(context.Context, *PlayerGameRequest) (*PlayerGameReply, error)
	mustEmbedUnimplementedServicioGolangServer()
}

// UnimplementedServicioGolangServer must be embedded to have forward compatible implementations.
type UnimplementedServicioGolangServer struct {
}

func (UnimplementedServicioGolangServer) IniciarJuego(context.Context, *PlayerGameRequest) (*PlayerGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IniciarJuego not implemented")
}
func (UnimplementedServicioGolangServer) mustEmbedUnimplementedServicioGolangServer() {}

// UnsafeServicioGolangServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioGolangServer will
// result in compilation errors.
type UnsafeServicioGolangServer interface {
	mustEmbedUnimplementedServicioGolangServer()
}

func RegisterServicioGolangServer(s grpc.ServiceRegistrar, srv ServicioGolangServer) {
	s.RegisterService(&ServicioGolang_ServiceDesc, srv)
}

func _ServicioGolang_IniciarJuego_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioGolangServer).IniciarJuego(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServicioGolang/IniciarJuego",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioGolangServer).IniciarJuego(ctx, req.(*PlayerGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicioGolang_ServiceDesc is the grpc.ServiceDesc for ServicioGolang service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicioGolang_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServicioGolang",
	HandlerType: (*ServicioGolangServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IniciarJuego",
			Handler:    _ServicioGolang_IniciarJuego_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/demo.proto",
}
